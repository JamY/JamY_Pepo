"""
Django settings for MxShop project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 将BASE_DIR apps extra_apps加入到python搜索路径之下
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 't_knx7hnliyi^dch2_wj(igv&h7*4w8$)$*7syy&t6nf=yzod7' # 秘钥

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []
# 允许外部ip访问
ALLOWED_HOSTS = ['*']

# 替换系统用户
AUTH_USER_MODEL = 'users.UserProfile'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'users.apps.UsersConfig',和'users'注册方式相同
    'DjangoUeditor',
    'users.apps.UsersConfig',
    'goods.apps.GoodsConfig',
    'trade.apps.TradeConfig',
    'user_operation.apps.UserOperationConfig',
    'xadmin', # 第三方app xadmin需要
    'crispy_forms', # 第三方app xadmin需要
    'rest_framework', # 配置drf
    'django_filters', # 配置filter
    'corsheaders', # 配置跨域问题
    'rest_framework.authtoken', #drf 的token认证登录，需migrate生成数据表
    'social_django', # social_django 集成第三方登录
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # 跨域问题 该设置放到第一个
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', # CSRF检查
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 跨域问题
CORS_ORIGIN_ALLOW_ALL = True
ROOT_URLCONF = 'MxShop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # 配置templates位置
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends', # 第三方登录
                'social_django.context_processors.login_redirect', # 第三方登录
            ],
        },
    },
]

WSGI_APPLICATION = 'MxShop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
# 配置数据库
DATABASES = {
    # 本地数据库
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "mxshop",
        'USER': 'root',
        'PASSWORD':'123456',
        'HOST':'127.0.0.1',
        'OPTIONS': {'init_command':'SET default_storage_engine=INNODB;'}# 设置创建数据库的引擎，方便第三方登录修改表
    }
    # 配置外连数据库
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': "mxshop",
    #     'USER': 'root',
    #     'PASSWORD': 'gws6yIZgLhfL',
    #     'HOST': '132.232.148.220', # 线上服务器ip地址
    #     'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}  # 设置创建数据库的引擎，方便第三方登录修改表
    # }

}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/
# 设置时区
LANGUAGE_CODE = 'zh-hans' #中文支持，django1.8以后支持；1.8以前是zh-cn

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False   #默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！！

# 自定义认证类
AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
    'social_core.backends.weibo.WeiboOAuth2', # 微博登录认证
    'social_core.backends.qq.QQOAuth2', # qq
    'social_core.backends.weixin.WeixinOAuth2', # 微信
    'django.contrib.auth.backends.ModelBackend',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# 设置media文件路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# 设置static文件路径
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

# 所有关于drf的配置都写到这个变量
REST_FRAMEWORK = {
#     # 分页显示
#     # 配置返回的json数据分页显示，添加了额外的信息
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 10,

    # 设置用户验证类
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication', # drf用户登录
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication' # 全局token 或者 在view配置局部token
        # 验证成功则会取出user
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # djangorestframework-jwt
        #  应该局部配置token 全局配置会对request请求都加入token，当token过期，当访问goods不需要验证的页面时报错
    ),

    # drf 的throttle 访问限速 防止爬虫导致服务器压力
    # 'DEFAULT_THROTTLE_CLASSES': (
    #         'rest_framework.throttling.AnonRateThrottle', # 匿名用户限速
    #         'rest_framework.throttling.UserRateThrottle' # 登录后限速
    # ),
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '10/minute', # 10次/分
    #     'user': '10/minute'
    # }
}
# 设置jwt过期时间
import datetime
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}
#手机号码正则表达式
REGEX_MOBILE = "^1[358]\d{9}$|^147\d{8}$|^176\d{8}$"
#云片网设置
APIKEY = ""
#支付宝相关配置
private_key_path = os.path.join(BASE_DIR, 'apps/trade/keys/private_2048.txt')
ali_pub_key_path = os.path.join(BASE_DIR, 'apps/trade/keys/alipay_key_2048.txt')

# 设置 drf 缓存过期时间 60*15s
REST_FRAMEWORK_EXTENSIONS ={
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 15
}

# 配置redis缓存 采用redis缓存 可缓存html 和 json内容
# pip install django-redis
# 启动redis-server
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }
# 第三方登录
SOCIAL_AUTH_WEIBO_KEY = '4160810630'
SOCIAL_AUTH_WEIBO_SECRET = '954558f9ebd7671e28a7a280ad11dba9'
SOCIAL_AUTH_QQ_KEY = 'foobar'
SOCIAL_AUTH_QQ_SECRET = 'bazqux'
SOCIAL_AUTH_WEIXIN_KEY = 'foobar'
SOCIAL_AUTH_WINXIN_SECRET = 'bazqux'

# 第三方登录后跳转页面 在数据库自动创建用户 表social_auth_usersocialauth users_userprofile
# 更改源码 social_core 用以得到
SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'http://127.0.0.1:8080/'